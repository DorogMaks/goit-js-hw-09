{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,UAGlCH,EAAKI,QAAQC,aAAa,MAAO,KAEjC,IAAgCC,EAAAN,EAAKC,OAAOM,SAApCC,EAAwBF,EAAxBG,MAAOC,EAAiBJ,EAAjBK,KAAMC,EAAWN,EAAXO,OAMrB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUN,MAAAO,IAEpBG,EAAO,CAAEJ,WAAUN,MAAAO,MAEpBA,MAdPR,EAAMH,aAAa,OAAQ,OAC3BK,EAAKL,aAAa,OAAQ,OAE1BL,EAAKC,OAAOsB,iBAAiB,UAe7B,SAAsBC,GACpBA,EAAIC,iBAIJ,IAFA,IAAIC,EAAaC,OAAOnB,EAAMoB,OAErBC,EAAI,EAAGA,GAAKF,OAAOf,EAAOgB,OAAQC,GAAK,EAC9Cf,EAAce,EAAGH,GACdI,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUiB,EAAKD,EAALtB,MACjBX,EAAAmC,OAAOC,QAAQ,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANH,EAAM,UAE9DI,OAAM,SAAAL,G,IAAGhB,EAAQgB,EAARhB,SAAUsB,EAAKN,EAALtB,MAClBX,EAAAmC,OAAOK,QAAQ,sBAAuCH,OAAfpB,EAAS,QAAYoB,OAANE,EAAM,UAEhEX,GAAcC,OAAOjB,EAAKkB,OAG5B5B,EAAKC,OAAOsC,W","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  inputEl: document.querySelector('input'),\n};\n\nrefs.inputEl.setAttribute('min', '0');\n\nconst { delay, step, amount } = refs.formEl.elements;\ndelay.setAttribute('step', '250');\nstep.setAttribute('step', '250');\n\nrefs.formEl.addEventListener('submit', onFormSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  let delayValue = Number(delay.value);\n\n  for (let i = 1; i <= Number(amount.value); i += 1) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayValue += Number(step.value);\n  }\n\n  refs.formEl.reset();\n}\n\n// _________________________________________________________________________________\n// import Notiflix from 'notiflix';\n\n// const refs = {\n//   formEl: document.querySelector('.form'),\n//   inputEl: document.querySelector('input'),\n//   inputDelay: document.querySelector('input[name=\"delay\"]'),\n//   inputStep: document.querySelector('input[name=\"step\"]'),\n//   inputAmount: document.querySelector('input[name=\"amount\"]'),\n//   btnCreatePromises: document.querySelector('button[type=\"submit\"]'),\n// };\n\n// refs.inputEl.setAttribute('min', '0');\n// refs.inputDelay.setAttribute('step', '250');\n// refs.inputStep.setAttribute('step', '250');\n\n// refs.btnCreatePromises.addEventListener('click', onBtnCreatePromisesClick);\n\n// function createPromise(position, delay) {\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n\n//   return promise;\n// }\n\n// function onBtnCreatePromisesClick(evt) {\n//   evt.preventDefault();\n\n//   let firstDelay = Number(refs.inputDelay.value);\n//   let delayStep = Number(refs.inputStep.value);\n//   const amount = Number(refs.inputAmount.value);\n\n//   for (let i = 0; i < amount; i += 1) {\n//     createPromise(1 + i, firstDelay + i * delayStep)\n//       .then(({ position, delay }) => {\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//   }\n\n//   if (refs.inputDelay.value && refs.inputStep.value && refs.inputAmount.value) {\n//     refs.formEl.reset();\n//   }\n// }\n//\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","inputEl","setAttribute","$ce04d3a99e08e73b$var$_elements","elements","$ce04d3a99e08e73b$var$delay","delay","$ce04d3a99e08e73b$var$step","step","$ce04d3a99e08e73b$var$amount","amount","$ce04d3a99e08e73b$var$createPromise","position","delay1","Promise","resolve","reject","setTimeout","Math","random","addEventListener","evt","preventDefault","delayValue","Number","value","i","then","param","delay2","Notify","success","concat","catch","delay3","failure","reset"],"version":3,"file":"03-promises.fc23ee06.js.map"}